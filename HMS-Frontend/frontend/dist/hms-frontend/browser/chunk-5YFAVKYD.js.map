{
  "version": 3,
  "sources": ["src/app/core/services/guest.service.ts", "src/app/core/services/room.service.ts", "src/app/core/services/reservation.service.ts", "src/app/features/invoices/invoice-form/invoice-form.component.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Guest } from '../models/guest.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GuestService {\r\n  private apiUrl = `${environment.apiUrl}/guests`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGuests(page: number = 0, size: number = 10, search: string = ''): Observable<{guests: Guest[], total: number} | Guest[]> {\r\n    // If no pagination parameters provided, return all guests\r\n    if (page === undefined && size === undefined && search === '') {\r\n      return this.http.get<Guest[]>(this.apiUrl);\r\n    }\r\n    \r\n    // Otherwise return paginated results\r\n    const params: any = { page: page.toString(), size: size.toString() };\r\n    if (search) {\r\n      params['search'] = search;\r\n    }\r\n    return this.http.get<{guests: Guest[], total: number}>(this.apiUrl, { params });\r\n  }\r\n\r\n  getGuestById(id: string): Observable<Guest> {\r\n    return this.http.get<Guest>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createGuest(guest: Guest): Observable<Guest> {\r\n    return this.http.post<Guest>(this.apiUrl, guest);\r\n  }\r\n\r\n  updateGuest(guest: Guest): Observable<Guest> {\r\n    return this.http.put<Guest>(`${this.apiUrl}/${guest.id}`, guest);\r\n  }\r\n\r\n  deleteGuest(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  searchGuests(query: string): Observable<Guest[]> {\r\n    return this.http.get<Guest[]>(`${this.apiUrl}/search`, { params: { query } });\r\n  }\r\n} ", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Room } from '../models/room.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoomService {\r\n  private apiUrl = `${environment.apiUrl}/rooms`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getRooms(page: number = 0, size: number = 10, search: string = ''): Observable<{rooms: Room[], total: number} | Room[]> {\r\n    // If no pagination parameters provided, return all rooms\r\n    if (page === undefined && size === undefined && search === '') {\r\n      return this.http.get<Room[]>(this.apiUrl);\r\n    }\r\n    \r\n    // Otherwise return paginated results\r\n    const params: any = { page: page.toString(), size: size.toString() };\r\n    if (search) {\r\n      params['search'] = search;\r\n    }\r\n    return this.http.get<{rooms: Room[], total: number}>(this.apiUrl, { params });\r\n  }\r\n\r\n  getRoomById(id: string): Observable<Room> {\r\n    return this.http.get<Room>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createRoom(room: Room): Observable<Room> {\r\n    return this.http.post<Room>(this.apiUrl, room);\r\n  }\r\n\r\n  updateRoom(room: Room): Observable<Room> {\r\n    return this.http.put<Room>(`${this.apiUrl}/${room.id}`, room);\r\n  }\r\n\r\n  deleteRoom(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getAvailableRooms(checkInDate: string, checkOutDate: string): Observable<Room[]> {\r\n    return this.http.get<Room[]>(`${this.apiUrl}/available`, { \r\n      params: { checkInDate, checkOutDate } \r\n    });\r\n  }\r\n\r\n  updateRoomStatus(id: string, status: string): Observable<Room> {\r\n    return this.http.patch<Room>(`${this.apiUrl}/${id}/status`, { status });\r\n  }\r\n} ", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Reservation } from '../models/reservation.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReservationService {\r\n  private apiUrl = `${environment.apiUrl}/reservations`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getReservations(page: number = 0, size: number = 10, search: string = ''): Observable<{reservations: Reservation[], total: number} | Reservation[]> {\r\n    // If no pagination parameters provided, return all reservations\r\n    if (page === undefined && size === undefined && search === '') {\r\n      return this.http.get<Reservation[]>(this.apiUrl);\r\n    }\r\n    \r\n    // Otherwise return paginated results\r\n    const params: any = { page: page.toString(), size: size.toString() };\r\n    if (search) {\r\n      params['search'] = search;\r\n    }\r\n    return this.http.get<{reservations: Reservation[], total: number}>(this.apiUrl, { params });\r\n  }\r\n\r\n  getReservationById(id: string): Observable<Reservation> {\r\n    return this.http.get<Reservation>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createReservation(reservation: Reservation): Observable<Reservation> {\r\n    return this.http.post<Reservation>(this.apiUrl, reservation);\r\n  }\r\n\r\n  updateReservation(reservation: Reservation): Observable<Reservation> {\r\n    return this.http.put<Reservation>(`${this.apiUrl}/${reservation.id}`, reservation);\r\n  }\r\n\r\n  deleteReservation(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  checkIn(id: string): Observable<Reservation> {\r\n    return this.http.patch<Reservation>(`${this.apiUrl}/${id}/check-in`, {});\r\n  }\r\n\r\n  checkOut(id: string): Observable<Reservation> {\r\n    return this.http.patch<Reservation>(`${this.apiUrl}/${id}/check-out`, {});\r\n  }\r\n\r\n  cancel(id: string, reason: string): Observable<Reservation> {\r\n    return this.http.patch<Reservation>(`${this.apiUrl}/${id}/cancel`, { reason });\r\n  }\r\n\r\n  getReservationsByGuest(guestId: string): Observable<Reservation[]> {\r\n    return this.http.get<Reservation[]>(`${this.apiUrl}/guest/${guestId}`);\r\n  }\r\n\r\n  getReservationsByRoom(roomId: string): Observable<Reservation[]> {\r\n    return this.http.get<Reservation[]>(`${this.apiUrl}/room/${roomId}`);\r\n  }\r\n\r\n  checkAvailability(checkInDate: string, checkOutDate: string, roomId?: string): Observable<boolean> {\r\n    const params: any = { checkInDate, checkOutDate };\r\n    if (roomId) {\r\n      params.roomId = roomId;\r\n    }\r\n    return this.http.get<boolean>(`${this.apiUrl}/check-availability`, { params });\r\n  }\r\n\r\n  getCurrentReservations(): Observable<Reservation[]> {\r\n    return this.http.get<Reservation[]>(`${this.apiUrl}/current`);\r\n  }\r\n\r\n  getUpcomingReservations(): Observable<Reservation[]> {\r\n    return this.http.get<Reservation[]>(`${this.apiUrl}/upcoming`);\r\n  }\r\n} ", "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { InvoiceService } from '../../../core/services/invoice.service';\r\nimport { GuestService } from '../../../core/services/guest.service';\r\nimport { RoomService } from '../../../core/services/room.service';\r\nimport { ReservationService } from '../../../core/services/reservation.service';\r\nimport { Invoice } from '../../../core/models/invoice.model';\r\nimport { Guest } from '../../../core/models/guest.model';\r\nimport { Room } from '../../../core/models/room.model';\r\nimport { Reservation } from '../../../core/models/reservation.model';\r\n\r\n@Component({\r\n  selector: 'app-invoice-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatTableModule,\r\n    MatAutocompleteModule\r\n  ],\r\n  template: `\r\n    <div class=\"container\">\r\n      <div class=\"header\">\r\n        <h1>{{ isEditMode ? 'Edit Invoice' : 'Create New Invoice' }}</h1>\r\n        <button mat-button color=\"primary\" routerLink=\"/invoices\">\r\n          <mat-icon>arrow_back</mat-icon> Back to Invoices\r\n        </button>\r\n      </div>\r\n\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <form [formGroup]=\"invoiceForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-section\">\r\n              <h2>Basic Information</h2>\r\n              <div class=\"row\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Invoice Number</mat-label>\r\n                  <input matInput formControlName=\"invoiceNumber\" placeholder=\"INV-00001\">\r\n                  <mat-error *ngIf=\"invoiceForm.get('invoiceNumber')?.hasError('required')\">\r\n                    Invoice number is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Issue Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"issueDatePicker\" formControlName=\"issueDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"issueDatePicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #issueDatePicker></mat-datepicker>\r\n                  <mat-error *ngIf=\"invoiceForm.get('issueDate')?.hasError('required')\">\r\n                    Issue date is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Due Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"dueDatePicker\" formControlName=\"dueDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"dueDatePicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #dueDatePicker></mat-datepicker>\r\n                  <mat-error *ngIf=\"invoiceForm.get('dueDate')?.hasError('required')\">\r\n                    Due date is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Status</mat-label>\r\n                  <mat-select formControlName=\"status\">\r\n                    <mat-option value=\"Unpaid\">Unpaid</mat-option>\r\n                    <mat-option value=\"Partially Paid\">Partially Paid</mat-option>\r\n                    <mat-option value=\"Paid\">Paid</mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"invoiceForm.get('status')?.hasError('required')\">\r\n                    Status is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-section\">\r\n              <h2>Reservation Details</h2>\r\n              <div class=\"row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Reservation</mat-label>\r\n                  <mat-select formControlName=\"reservationId\" (selectionChange)=\"onReservationChange($event.value)\">\r\n                    <mat-option *ngFor=\"let reservation of reservations\" [value]=\"reservation.id\">\r\n                      {{ reservation.id }} - {{ reservation.guestName }} ({{ reservation.checkInDate | date }} to {{ reservation.checkOutDate | date }})\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Guest</mat-label>\r\n                  <input matInput formControlName=\"guestName\" [matAutocomplete]=\"autoGuest\">\r\n                  <mat-autocomplete #autoGuest=\"matAutocomplete\" [displayWith]=\"displayGuest\">\r\n                    <mat-option *ngFor=\"let guest of filteredGuests | async\" [value]=\"guest\">\r\n                      {{ guest.firstName }} {{ guest.lastName }}\r\n                    </mat-option>\r\n                  </mat-autocomplete>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Room</mat-label>\r\n                  <input matInput formControlName=\"roomNumber\" [matAutocomplete]=\"autoRoom\">\r\n                  <mat-autocomplete #autoRoom=\"matAutocomplete\" [displayWith]=\"displayRoom\">\r\n                    <mat-option *ngFor=\"let room of filteredRooms | async\" [value]=\"room\">\r\n                      {{ room.roomNumber }} - {{ room.type }}\r\n                    </mat-option>\r\n                  </mat-autocomplete>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Check-in Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"checkInPicker\" formControlName=\"checkInDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"checkInPicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #checkInPicker></mat-datepicker>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Check-out Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"checkOutPicker\" formControlName=\"checkOutDate\">\r\n                  <mat-datepicker-toggle matSuffix [for]=\"checkOutPicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #checkOutPicker></mat-datepicker>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-section\">\r\n              <div class=\"section-header\">\r\n                <h2>Invoice Items</h2>\r\n                <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"addItem()\">\r\n                  <mat-icon>add</mat-icon> Add Item\r\n                </button>\r\n              </div>\r\n\r\n              <table mat-table [dataSource]=\"itemsFormArray.controls\" class=\"items-table\">\r\n                <!-- Description Column -->\r\n                <ng-container matColumnDef=\"description\">\r\n                  <th mat-header-cell *matHeaderCellDef>Description</th>\r\n                  <td mat-cell *matCellDef=\"let itemControl; let i = index\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <input matInput [formControl]=\"getFormControl(itemControl, 'description')\" placeholder=\"Room charge, Service, etc.\">\r\n                    </mat-form-field>\r\n                  </td>\r\n                </ng-container>\r\n\r\n                <!-- Quantity Column -->\r\n                <ng-container matColumnDef=\"quantity\">\r\n                  <th mat-header-cell *matHeaderCellDef>Quantity</th>\r\n                  <td mat-cell *matCellDef=\"let itemControl; let i = index\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <input matInput type=\"number\" [formControl]=\"getFormControl(itemControl, 'quantity')\" min=\"1\" (input)=\"updateItemAmount(i)\">\r\n                    </mat-form-field>\r\n                  </td>\r\n                </ng-container>\r\n\r\n                <!-- Unit Price Column -->\r\n                <ng-container matColumnDef=\"unitPrice\">\r\n                  <th mat-header-cell *matHeaderCellDef>Unit Price</th>\r\n                  <td mat-cell *matCellDef=\"let itemControl; let i = index\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <input matInput type=\"number\" [formControl]=\"getFormControl(itemControl, 'unitPrice')\" min=\"0\" step=\"0.01\" (input)=\"updateItemAmount(i)\">\r\n                    </mat-form-field>\r\n                  </td>\r\n                </ng-container>\r\n\r\n                <!-- Amount Column -->\r\n                <ng-container matColumnDef=\"amount\">\r\n                  <th mat-header-cell *matHeaderCellDef>Amount</th>\r\n                  <td mat-cell *matCellDef=\"let itemControl; let i = index\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <input matInput type=\"number\" [formControl]=\"getFormControl(itemControl, 'amount')\" readonly>\r\n                    </mat-form-field>\r\n                  </td>\r\n                </ng-container>\r\n\r\n                <!-- Actions Column -->\r\n                <ng-container matColumnDef=\"actions\">\r\n                  <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n                  <td mat-cell *matCellDef=\"let itemControl; let i = index\">\r\n                    <button type=\"button\" mat-icon-button color=\"warn\" (click)=\"removeItem(i)\">\r\n                      <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                  </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n              </table>\r\n            </div>\r\n\r\n            <div class=\"form-section\">\r\n              <h2>Payment Summary</h2>\r\n              <div class=\"row\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Subtotal</mat-label>\r\n                  <input matInput formControlName=\"subtotal\" readonly>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Tax Rate (%)</mat-label>\r\n                  <input matInput type=\"number\" formControlName=\"taxRate\" min=\"0\" max=\"100\" (input)=\"updateTotals()\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Tax Amount</mat-label>\r\n                  <input matInput formControlName=\"taxAmount\" readonly>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Total Amount</mat-label>\r\n                  <input matInput formControlName=\"totalAmount\" readonly>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"row\" *ngIf=\"invoiceForm.get('status')?.value !== 'Unpaid'\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Amount Paid</mat-label>\r\n                  <input matInput type=\"number\" formControlName=\"amountPaid\" min=\"0\" (input)=\"updateBalanceDue()\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Balance Due</mat-label>\r\n                  <input matInput formControlName=\"balanceDue\" readonly>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-section\">\r\n              <h2>Notes</h2>\r\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                <mat-label>Notes</mat-label>\r\n                <textarea matInput formControlName=\"notes\" rows=\"4\" placeholder=\"Add any notes or special instructions here\"></textarea>\r\n              </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"actions\">\r\n              <button mat-button routerLink=\"/invoices\">Cancel</button>\r\n              <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"invoiceForm.invalid\">\r\n                {{ isEditMode ? 'Update Invoice' : 'Create Invoice' }}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container {\r\n      padding: 20px;\r\n    }\r\n    .header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 20px;\r\n    }\r\n    .form-section {\r\n      margin-bottom: 30px;\r\n    }\r\n    .section-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 15px;\r\n    }\r\n    .row {\r\n      display: flex;\r\n      gap: 16px;\r\n      flex-wrap: wrap;\r\n    }\r\n    .row mat-form-field {\r\n      flex: 1;\r\n      min-width: 200px;\r\n    }\r\n    .full-width {\r\n      width: 100%;\r\n    }\r\n    .items-table {\r\n      width: 100%;\r\n    }\r\n    .mat-column-description {\r\n      min-width: 250px;\r\n    }\r\n    .mat-column-quantity, .mat-column-unitPrice, .mat-column-amount {\r\n      min-width: 150px;\r\n    }\r\n    .mat-column-actions {\r\n      width: 70px;\r\n    }\r\n    .actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 10px;\r\n      margin-top: 20px;\r\n    }\r\n  `]\r\n})\r\nexport class InvoiceFormComponent implements OnInit {\r\n  invoiceForm: FormGroup;\r\n  isEditMode = false;\r\n  invoiceId: string | null = null;\r\n  reservations: Reservation[] = [];\r\n  guests: Guest[] = [];\r\n  rooms: Room[] = [];\r\n  filteredGuests: Observable<Guest[]> = of([]);\r\n  filteredRooms: Observable<Room[]> = of([]);\r\n  displayedColumns: string[] = ['description', 'quantity', 'unitPrice', 'amount', 'actions'];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private invoiceService: InvoiceService,\r\n    private guestService: GuestService,\r\n    private roomService: RoomService,\r\n    private reservationService: ReservationService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.invoiceForm = this.createForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n    \r\n    this.route.paramMap.subscribe(params => {\r\n      this.invoiceId = params.get('id');\r\n      if (this.invoiceId) {\r\n        this.isEditMode = true;\r\n        this.loadInvoice(this.invoiceId);\r\n      } else {\r\n        // Initialize with one item for new invoices\r\n        this.addItem();\r\n      }\r\n    });\r\n\r\n    this.setupAutocomplete();\r\n  }\r\n\r\n  createForm(): FormGroup {\r\n    return this.fb.group({\r\n      invoiceNumber: ['', Validators.required],\r\n      issueDate: [new Date(), Validators.required],\r\n      dueDate: [new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), Validators.required], // 14 days from now\r\n      status: ['Unpaid', Validators.required],\r\n      reservationId: [''],\r\n      guestName: ['', Validators.required],\r\n      guestEmail: [''],\r\n      guestPhone: [''],\r\n      guestAddress: [''],\r\n      roomNumber: ['', Validators.required],\r\n      checkInDate: [null],\r\n      checkOutDate: [null],\r\n      stayDuration: [0],\r\n      items: this.fb.array([]),\r\n      subtotal: [0],\r\n      taxRate: [10], // Default tax rate\r\n      taxAmount: [0],\r\n      totalAmount: [0],\r\n      amountPaid: [0],\r\n      balanceDue: [0],\r\n      notes: ['']\r\n    });\r\n  }\r\n\r\n  get itemsFormArray(): FormArray {\r\n    return this.invoiceForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(): void {\r\n    const itemGroup = this.fb.group({\r\n      description: ['', Validators.required],\r\n      quantity: [1, [Validators.required, Validators.min(1)]],\r\n      unitPrice: [0, [Validators.required, Validators.min(0)]],\r\n      amount: [0]\r\n    });\r\n\r\n    this.itemsFormArray.push(itemGroup);\r\n    this.updateTotals();\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.itemsFormArray.removeAt(index);\r\n    this.updateTotals();\r\n  }\r\n\r\n  getFormControl(control: any, name: string): any {\r\n    return control.get(name);\r\n  }\r\n\r\n  updateItemAmount(index: number): void {\r\n    const items = this.itemsFormArray.controls;\r\n    const item = items[index] as FormGroup;\r\n    const quantity = item.get('quantity')?.value || 0;\r\n    const unitPrice = item.get('unitPrice')?.value || 0;\r\n    const amount = quantity * unitPrice;\r\n    \r\n    item.get('amount')?.setValue(amount, { emitEvent: false });\r\n    this.updateTotals();\r\n  }\r\n\r\n  updateTotals(): void {\r\n    // Calculate subtotal\r\n    let subtotal = 0;\r\n    for (const control of this.itemsFormArray.controls) {\r\n      subtotal += control.get('amount')?.value || 0;\r\n    }\r\n    \r\n    // Update form values\r\n    const taxRate = this.invoiceForm.get('taxRate')?.value || 0;\r\n    const taxAmount = subtotal * (taxRate / 100);\r\n    const totalAmount = subtotal + taxAmount;\r\n    \r\n    this.invoiceForm.patchValue({\r\n      subtotal: subtotal,\r\n      taxAmount: taxAmount,\r\n      totalAmount: totalAmount\r\n    });\r\n    \r\n    this.updateBalanceDue();\r\n  }\r\n\r\n  updateBalanceDue(): void {\r\n    const totalAmount = this.invoiceForm.get('totalAmount')?.value || 0;\r\n    const amountPaid = this.invoiceForm.get('amountPaid')?.value || 0;\r\n    const balanceDue = Math.max(0, totalAmount - amountPaid);\r\n    \r\n    this.invoiceForm.patchValue({\r\n      balanceDue: balanceDue\r\n    });\r\n    \r\n    // Update status based on payment\r\n    if (amountPaid <= 0) {\r\n      this.invoiceForm.get('status')?.setValue('Unpaid');\r\n    } else if (amountPaid >= totalAmount) {\r\n      this.invoiceForm.get('status')?.setValue('Paid');\r\n    } else {\r\n      this.invoiceForm.get('status')?.setValue('Partially Paid');\r\n    }\r\n  }\r\n\r\n  loadData(): void {\r\n    // Load reservations\r\n    this.reservationService.getReservations(undefined, undefined, '').subscribe(\r\n      (result: any) => {\r\n        this.reservations = Array.isArray(result) ? result : result.reservations;\r\n      }\r\n    );\r\n    \r\n    // Load guests\r\n    this.guestService.getGuests(undefined, undefined, '').subscribe(\r\n      (result: any) => {\r\n        this.guests = Array.isArray(result) ? result : result.guests;\r\n      }\r\n    );\r\n    \r\n    // Load rooms\r\n    this.roomService.getRooms(undefined, undefined, '').subscribe(\r\n      (result: any) => {\r\n        this.rooms = Array.isArray(result) ? result : result.rooms;\r\n      }\r\n    );\r\n  }\r\n\r\n  loadInvoice(id: string): void {\r\n    this.invoiceService.getInvoiceById(id).subscribe(\r\n      (invoice: Invoice) => {\r\n        // Clear existing items\r\n        while (this.itemsFormArray.length) {\r\n          this.itemsFormArray.removeAt(0);\r\n        }\r\n        \r\n        // Add invoice items\r\n        for (const item of invoice.items) {\r\n          const itemGroup = this.fb.group({\r\n            description: [item.description, Validators.required],\r\n            quantity: [item.quantity, [Validators.required, Validators.min(1)]],\r\n            unitPrice: [item.unitPrice, [Validators.required, Validators.min(0)]],\r\n            amount: [item.amount]\r\n          });\r\n          this.itemsFormArray.push(itemGroup);\r\n        }\r\n        \r\n        // Update the form with invoice data\r\n        this.invoiceForm.patchValue({\r\n          invoiceNumber: invoice.invoiceNumber,\r\n          issueDate: new Date(invoice.issueDate),\r\n          dueDate: new Date(invoice.dueDate),\r\n          status: invoice.status,\r\n          reservationId: invoice.reservationId,\r\n          guestName: invoice.guestName,\r\n          guestEmail: invoice.guestEmail,\r\n          guestPhone: invoice.guestPhone,\r\n          guestAddress: invoice.guestAddress,\r\n          roomNumber: invoice.roomNumber,\r\n          checkInDate: invoice.checkInDate ? new Date(invoice.checkInDate) : null,\r\n          checkOutDate: invoice.checkOutDate ? new Date(invoice.checkOutDate) : null,\r\n          stayDuration: invoice.stayDuration,\r\n          subtotal: invoice.subtotal,\r\n          taxRate: invoice.taxRate,\r\n          taxAmount: invoice.taxAmount,\r\n          totalAmount: invoice.totalAmount,\r\n          amountPaid: invoice.amountPaid,\r\n          balanceDue: invoice.balanceDue,\r\n          notes: invoice.notes\r\n        });\r\n      },\r\n      (error: any) => {\r\n        console.error('Error loading invoice:', error);\r\n        this.snackBar.open('Error loading invoice', 'Close', { duration: 3000 });\r\n      }\r\n    );\r\n  }\r\n\r\n  setupAutocomplete(): void {\r\n    // Guest autocomplete\r\n    this.filteredGuests = this.invoiceForm.get('guestName')!.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this.filterGuests(value))\r\n    );\r\n    \r\n    // Room autocomplete\r\n    this.filteredRooms = this.invoiceForm.get('roomNumber')!.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this.filterRooms(value))\r\n    );\r\n  }\r\n\r\n  filterGuests(value: string | Guest): Guest[] {\r\n    const filterValue = typeof value === 'string' ? value.toLowerCase() : '';\r\n    return this.guests.filter(guest => \r\n      `${guest.firstName} ${guest.lastName}`.toLowerCase().includes(filterValue)\r\n    );\r\n  }\r\n\r\n  filterRooms(value: string | Room): Room[] {\r\n    const filterValue = typeof value === 'string' ? value.toLowerCase() : '';\r\n    return this.rooms.filter(room => \r\n      room.roomNumber.toLowerCase().includes(filterValue) || \r\n      room.type.toLowerCase().includes(filterValue)\r\n    );\r\n  }\r\n\r\n  displayGuest(guest: Guest): string {\r\n    return guest ? `${guest.firstName} ${guest.lastName}` : '';\r\n  }\r\n\r\n  displayRoom(room: Room): string {\r\n    return room ? `${room.roomNumber} - ${room.type}` : '';\r\n  }\r\n\r\n  onReservationChange(reservationId: string): void {\r\n    const reservation = this.reservations.find(r => r.id === reservationId);\r\n    if (reservation) {\r\n      // Populate form with reservation details\r\n      this.invoiceForm.patchValue({\r\n        guestName: reservation.guestName,\r\n        roomNumber: reservation.roomNumber,\r\n        checkInDate: new Date(reservation.checkInDate),\r\n        checkOutDate: new Date(reservation.checkOutDate),\r\n        stayDuration: this.calculateStayDuration(reservation.checkInDate, reservation.checkOutDate)\r\n      });\r\n      \r\n      // Clear existing items\r\n      while (this.itemsFormArray.length) {\r\n        this.itemsFormArray.removeAt(0);\r\n      }\r\n      \r\n      // Add room charge as an item\r\n      const itemGroup = this.fb.group({\r\n        description: [`Room Charge - ${reservation.roomNumber}`, Validators.required],\r\n        quantity: [reservation.stayDuration, [Validators.required, Validators.min(1)]],\r\n        unitPrice: [reservation.roomRate, [Validators.required, Validators.min(0)]],\r\n        amount: [reservation.stayDuration * reservation.roomRate]\r\n      });\r\n      this.itemsFormArray.push(itemGroup);\r\n      \r\n      this.updateTotals();\r\n    }\r\n  }\r\n\r\n  calculateStayDuration(checkIn: string | Date, checkOut: string | Date): number {\r\n    const checkInDate = new Date(checkIn);\r\n    const checkOutDate = new Date(checkOut);\r\n    const diffTime = Math.abs(checkOutDate.getTime() - checkInDate.getTime());\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    return diffDays;\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.invoiceForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    const formValue = this.invoiceForm.value;\r\n    \r\n    // Map form values to Invoice model\r\n    const invoice: Invoice = {\r\n      id: this.invoiceId || undefined,\r\n      invoiceNumber: formValue.invoiceNumber,\r\n      issueDate: formValue.issueDate,\r\n      dueDate: formValue.dueDate,\r\n      status: formValue.status,\r\n      reservationId: formValue.reservationId,\r\n      guestName: typeof formValue.guestName === 'string' ? formValue.guestName : formValue.guestName.firstName + ' ' + formValue.guestName.lastName,\r\n      guestEmail: formValue.guestEmail,\r\n      guestPhone: formValue.guestPhone,\r\n      guestAddress: formValue.guestAddress,\r\n      roomNumber: typeof formValue.roomNumber === 'string' ? formValue.roomNumber : formValue.roomNumber.roomNumber,\r\n      checkInDate: formValue.checkInDate,\r\n      checkOutDate: formValue.checkOutDate,\r\n      stayDuration: formValue.stayDuration,\r\n      items: formValue.items,\r\n      subtotal: formValue.subtotal,\r\n      taxRate: formValue.taxRate,\r\n      taxAmount: formValue.taxAmount,\r\n      totalAmount: formValue.totalAmount,\r\n      amountPaid: formValue.amountPaid,\r\n      balanceDue: formValue.balanceDue,\r\n      notes: formValue.notes\r\n    };\r\n    \r\n    if (this.isEditMode) {\r\n      this.invoiceService.updateInvoice(invoice).subscribe(\r\n        () => {\r\n          this.snackBar.open('Invoice updated successfully', 'Close', { duration: 3000 });\r\n          this.router.navigate(['/invoices', this.invoiceId]);\r\n        },\r\n        (error: any) => {\r\n          console.error('Error updating invoice:', error);\r\n          this.snackBar.open('Error updating invoice', 'Close', { duration: 3000 });\r\n        }\r\n      );\r\n    } else {\r\n      this.invoiceService.createInvoice(invoice).subscribe(\r\n        (newInvoice: Invoice) => {\r\n          this.snackBar.open('Invoice created successfully', 'Close', { duration: 3000 });\r\n          this.router.navigate(['/invoices', newInvoice.id]);\r\n        },\r\n        (error: any) => {\r\n          console.error('Error creating invoice:', error);\r\n          this.snackBar.open('Error creating invoice', 'Close', { duration: 3000 });\r\n        }\r\n      );\r\n    }\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
