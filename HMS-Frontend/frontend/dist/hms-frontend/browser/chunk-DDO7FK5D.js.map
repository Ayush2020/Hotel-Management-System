{
  "version": 3,
  "sources": ["src/app/features/reservations/reservation-form/reservation-form.component.ts"],
  "sourcesContent": ["import { Component, OnInit, inject } from '@angular/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { catchError, debounceTime, finalize, map, startWith, switchMap } from 'rxjs/operators';\r\nimport { Observable, forkJoin, of } from 'rxjs';\r\n\r\ninterface Guest {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  vip: boolean;\r\n}\r\n\r\ninterface Room {\r\n  id: number;\r\n  roomNumber: string;\r\n  type: string;\r\n  price: number;\r\n  capacity: number;\r\n  status: string;\r\n  floor: number;\r\n}\r\n\r\ninterface Reservation {\r\n  id?: number;\r\n  guestId: number;\r\n  roomId: number;\r\n  checkInDate: string;\r\n  checkOutDate: string;\r\n  status: string;\r\n  totalAmount: number;\r\n  paymentStatus: string;\r\n  notes: string;\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-reservation-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatAutocompleteModule,\r\n    MatDividerModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  template: `\r\n    <div class=\"reservation-form-container\">\r\n      <div class=\"loading-overlay\" *ngIf=\"loading\">\r\n        <mat-spinner diameter=\"40\"></mat-spinner>\r\n      </div>\r\n      \r\n      <div class=\"back-button\">\r\n        <button mat-button (click)=\"goBack()\">\r\n          <mat-icon>arrow_back</mat-icon> Back\r\n        </button>\r\n      </div>\r\n      \r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>{{ isEditMode ? 'Edit Reservation' : 'Create New Reservation' }}</mat-card-title>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <form [formGroup]=\"reservationForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-section\">\r\n              <h3>Guest Information</h3>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Guest</mat-label>\r\n                  <input \r\n                    type=\"text\" \r\n                    matInput \r\n                    formControlName=\"guestSearch\" \r\n                    [matAutocomplete]=\"autoGuest\"\r\n                    placeholder=\"Search by name, email or phone\"\r\n                    required>\r\n                  <mat-autocomplete #autoGuest=\"matAutocomplete\" [displayWith]=\"displayGuestFn\">\r\n                    <mat-option *ngFor=\"let guest of filteredGuests$ | async\" [value]=\"guest\">\r\n                      {{ guest.firstName }} {{ guest.lastName }} \r\n                      <span class=\"option-email\">{{ guest.email }}</span>\r\n                      <mat-icon *ngIf=\"guest.vip\" color=\"warn\" class=\"vip-icon\">star</mat-icon>\r\n                    </mat-option>\r\n                  </mat-autocomplete>\r\n                  <mat-error *ngIf=\"reservationForm.get('guestSearch')?.hasError('required')\">\r\n                    Guest is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              \r\n              <div *ngIf=\"selectedGuest\" class=\"guest-info\">\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Name:</span>\r\n                  <span class=\"info-value\">{{ selectedGuest.firstName }} {{ selectedGuest.lastName }}</span>\r\n                </div>\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Email:</span>\r\n                  <span class=\"info-value\">{{ selectedGuest.email || 'Not provided' }}</span>\r\n                </div>\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Phone:</span>\r\n                  <span class=\"info-value\">{{ selectedGuest.phone || 'Not provided' }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <mat-divider></mat-divider>\r\n            \r\n            <div class=\"form-section\">\r\n              <h3>Room Selection</h3>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Room</mat-label>\r\n                  <mat-select formControlName=\"roomId\" required>\r\n                    <mat-option *ngFor=\"let room of availableRooms\" [value]=\"room.id\">\r\n                      {{ room.roomNumber }} - {{ room.type }} ({{ room.capacity }} person) - {{ room.price | currency }}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"reservationForm.get('roomId')?.hasError('required')\">\r\n                    Room selection is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              \r\n              <div *ngIf=\"selectedRoom\" class=\"room-info\">\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Room Number:</span>\r\n                  <span class=\"info-value\">{{ selectedRoom.roomNumber }}</span>\r\n                </div>\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Type:</span>\r\n                  <span class=\"info-value\">{{ selectedRoom.type }}</span>\r\n                </div>\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Capacity:</span>\r\n                  <span class=\"info-value\">{{ selectedRoom.capacity }} person</span>\r\n                </div>\r\n                <div class=\"info-row\">\r\n                  <span class=\"info-label\">Price per night:</span>\r\n                  <span class=\"info-value\">{{ selectedRoom.price | currency }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <mat-divider></mat-divider>\r\n            \r\n            <div class=\"form-section\">\r\n              <h3>Reservation Details</h3>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Check-in Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"checkInPicker\" formControlName=\"checkInDate\" required>\r\n                  <mat-datepicker-toggle matIconSuffix [for]=\"checkInPicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #checkInPicker></mat-datepicker>\r\n                  <mat-error *ngIf=\"reservationForm.get('checkInDate')?.hasError('required')\">\r\n                    Check-in date is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Check-out Date</mat-label>\r\n                  <input matInput [matDatepicker]=\"checkOutPicker\" formControlName=\"checkOutDate\" required>\r\n                  <mat-datepicker-toggle matIconSuffix [for]=\"checkOutPicker\"></mat-datepicker-toggle>\r\n                  <mat-datepicker #checkOutPicker></mat-datepicker>\r\n                  <mat-error *ngIf=\"reservationForm.get('checkOutDate')?.hasError('required')\">\r\n                    Check-out date is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Status</mat-label>\r\n                  <mat-select formControlName=\"status\" required>\r\n                    <mat-option value=\"CONFIRMED\">Confirmed</mat-option>\r\n                    <mat-option value=\"PENDING\">Pending</mat-option>\r\n                    <mat-option value=\"CHECKED_IN\">Checked In</mat-option>\r\n                    <mat-option value=\"CHECKED_OUT\">Checked Out</mat-option>\r\n                    <mat-option value=\"CANCELLED\">Cancelled</mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"reservationForm.get('status')?.hasError('required')\">\r\n                    Status is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Payment Status</mat-label>\r\n                  <mat-select formControlName=\"paymentStatus\" required>\r\n                    <mat-option value=\"PAID\">Paid</mat-option>\r\n                    <mat-option value=\"PENDING\">Pending</mat-option>\r\n                    <mat-option value=\"PARTIAL\">Partial Payment</mat-option>\r\n                    <mat-option value=\"CANCELLED\">Cancelled</mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"reservationForm.get('paymentStatus')?.hasError('required')\">\r\n                    Payment status is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Total Amount</mat-label>\r\n                  <input type=\"number\" matInput formControlName=\"totalAmount\" required>\r\n                  <span matTextPrefix>$&nbsp;</span>\r\n                  <mat-error *ngIf=\"reservationForm.get('totalAmount')?.hasError('required')\">\r\n                    Total amount is required\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"reservationForm.get('totalAmount')?.hasError('min')\">\r\n                    Amount must be greater than 0\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              \r\n              <div class=\"form-row\">\r\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                  <mat-label>Notes</mat-label>\r\n                  <textarea \r\n                    matInput \r\n                    formControlName=\"notes\" \r\n                    placeholder=\"Additional information or special requests\"\r\n                    rows=\"4\">\r\n                  </textarea>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-actions\">\r\n              <button type=\"button\" mat-button (click)=\"goBack()\">Cancel</button>\r\n              <button \r\n                type=\"submit\" \r\n                mat-raised-button \r\n                color=\"primary\" \r\n                [disabled]=\"reservationForm.invalid || loading\">\r\n                {{ isEditMode ? 'Update Reservation' : 'Create Reservation' }}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .reservation-form-container {\r\n      padding: 16px;\r\n      position: relative;\r\n      max-width: 900px;\r\n      margin: 0 auto;\r\n    }\r\n    \r\n    .loading-overlay {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: rgba(255, 255, 255, 0.7);\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      z-index: 1;\r\n    }\r\n    \r\n    .back-button {\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .form-section {\r\n      margin: 24px 0;\r\n    }\r\n    \r\n    h3 {\r\n      font-size: 18px;\r\n      font-weight: 500;\r\n      margin-top: 0;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .form-row {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 16px;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .form-row mat-form-field {\r\n      flex: 1 1 200px;\r\n    }\r\n    \r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .option-email {\r\n      font-size: 12px;\r\n      color: rgba(0, 0, 0, 0.54);\r\n      margin-left: 8px;\r\n    }\r\n    \r\n    .vip-icon {\r\n      font-size: 16px;\r\n      height: 16px;\r\n      width: 16px;\r\n      vertical-align: middle;\r\n      margin-left: 4px;\r\n    }\r\n    \r\n    .guest-info, .room-info {\r\n      background-color: #f5f5f5;\r\n      padding: 16px;\r\n      border-radius: 4px;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .info-row {\r\n      margin-bottom: 8px;\r\n    }\r\n    \r\n    .info-row:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n    \r\n    .info-label {\r\n      font-weight: 500;\r\n      margin-right: 8px;\r\n    }\r\n    \r\n    mat-divider {\r\n      margin: 16px 0;\r\n    }\r\n    \r\n    .form-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 16px;\r\n      margin-top: 24px;\r\n    }\r\n  `]\r\n})\r\nexport class ReservationFormComponent implements OnInit {\r\n  private http = inject(HttpClient);\r\n  private fb = inject(FormBuilder);\r\n  private route = inject(ActivatedRoute);\r\n  private router = inject(Router);\r\n  private location = inject(Location);\r\n  private snackBar = inject(MatSnackBar);\r\n  \r\n  reservationForm: FormGroup;\r\n  isEditMode = false;\r\n  loading = false;\r\n  \r\n  // Guest selection\r\n  guests: Guest[] = [];\r\n  filteredGuests$: Observable<Guest[]>;\r\n  selectedGuest: Guest | null = null;\r\n  \r\n  // Room selection\r\n  availableRooms: Room[] = [];\r\n  selectedRoom: Room | null = null;\r\n  \r\n  constructor() {\r\n    this.reservationForm = this.fb.group({\r\n      guestSearch: ['', Validators.required],\r\n      guestId: ['', Validators.required],\r\n      roomId: ['', Validators.required],\r\n      checkInDate: ['', Validators.required],\r\n      checkOutDate: ['', Validators.required],\r\n      status: ['CONFIRMED', Validators.required],\r\n      totalAmount: [0, [Validators.required, Validators.min(0.01)]],\r\n      paymentStatus: ['PENDING', Validators.required],\r\n      notes: ['']\r\n    });\r\n    \r\n    // Set up guest search filtering\r\n    this.filteredGuests$ = this.reservationForm.get('guestSearch')!.valueChanges.pipe(\r\n      startWith(''),\r\n      debounceTime(300),\r\n      map(value => {\r\n        const search = typeof value === 'string' ? value.toLowerCase() : '';\r\n        if (search === '') {\r\n          return this.guests.slice(0, 10); // Show first 10 guests when no search\r\n        }\r\n        \r\n        return this.guests.filter(guest => \r\n          guest.firstName.toLowerCase().includes(search) || \r\n          guest.lastName.toLowerCase().includes(search) || \r\n          (guest.email && guest.email.toLowerCase().includes(search)) ||\r\n          (guest.phone && guest.phone.includes(search))\r\n        ).slice(0, 10); // Limit to 10 results\r\n      })\r\n    );\r\n    \r\n    // Update guestId when a guest is selected\r\n    this.reservationForm.get('guestSearch')!.valueChanges.subscribe(value => {\r\n      if (value && typeof value !== 'string') {\r\n        this.selectedGuest = value;\r\n        this.reservationForm.patchValue({ guestId: value.id });\r\n      } else {\r\n        this.selectedGuest = null;\r\n        this.reservationForm.patchValue({ guestId: '' });\r\n      }\r\n    });\r\n    \r\n    // Update selected room when roomId changes\r\n    this.reservationForm.get('roomId')!.valueChanges.subscribe(roomId => {\r\n      this.selectedRoom = this.availableRooms.find(room => room.id === roomId) || null;\r\n      if (this.selectedRoom) {\r\n        this.calculateTotalAmount();\r\n      }\r\n    });\r\n    \r\n    // Calculate total when dates change\r\n    this.reservationForm.get('checkInDate')!.valueChanges.subscribe(() => {\r\n      this.calculateTotalAmount();\r\n    });\r\n    \r\n    this.reservationForm.get('checkOutDate')!.valueChanges.subscribe(() => {\r\n      this.calculateTotalAmount();\r\n    });\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.loading = true;\r\n    \r\n    // Check for pre-selected guest from query params\r\n    this.route.queryParamMap.subscribe(params => {\r\n      const guestId = params.get('guestId');\r\n      if (guestId) {\r\n        this.loadSelectedGuest(Number(guestId));\r\n      }\r\n    });\r\n    \r\n    // Check if in edit mode\r\n    this.route.paramMap.pipe(\r\n      switchMap(params => {\r\n        const reservationId = params.get('id');\r\n        \r\n        // Load guests and rooms in parallel\r\n        const baseUrl = environment.apiUrl;\r\n        const guestsRequest = this.http.get<Guest[]>(`${baseUrl}/guests`).pipe(\r\n          catchError(error => {\r\n            console.error('Error loading guests', error);\r\n            this.snackBar.open('Failed to load guests. Please try again later.', 'Close', { duration: 5000 });\r\n            return of([]);\r\n          })\r\n        );\r\n        \r\n        const roomsRequest = this.http.get<Room[]>(`${baseUrl}/rooms?status=AVAILABLE`).pipe(\r\n          catchError(error => {\r\n            console.error('Error loading rooms', error);\r\n            this.snackBar.open('Failed to load available rooms. Please try again later.', 'Close', { duration: 5000 });\r\n            return of([]);\r\n          })\r\n        );\r\n        \r\n        // If in edit mode, also load the reservation details\r\n        if (reservationId) {\r\n          this.isEditMode = true;\r\n          const reservationRequest = this.http.get<Reservation>(`${baseUrl}/reservations/${reservationId}`).pipe(\r\n            catchError(error => {\r\n              console.error('Error loading reservation details', error);\r\n              this.snackBar.open('Failed to load reservation details. Please try again later.', 'Close', { duration: 5000 });\r\n              return of(null);\r\n            })\r\n          );\r\n          \r\n          return forkJoin({\r\n            guests: guestsRequest,\r\n            rooms: roomsRequest,\r\n            reservation: reservationRequest\r\n          });\r\n        } else {\r\n          return forkJoin({\r\n            guests: guestsRequest,\r\n            rooms: roomsRequest,\r\n            reservation: of(null)\r\n          });\r\n        }\r\n      }),\r\n      finalize(() => this.loading = false)\r\n    ).subscribe(data => {\r\n      this.guests = data.guests;\r\n      this.availableRooms = data.rooms;\r\n      \r\n      if (data.reservation) {\r\n        this.populateForm(data.reservation);\r\n      }\r\n    });\r\n  }\r\n  \r\n  loadSelectedGuest(guestId: number): void {\r\n    const baseUrl = environment.apiUrl;\r\n    this.http.get<Guest>(`${baseUrl}/guests/${guestId}`)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error loading guest details', error);\r\n          return of(null);\r\n        })\r\n      )\r\n      .subscribe(guest => {\r\n        if (guest) {\r\n          this.selectedGuest = guest;\r\n          this.reservationForm.patchValue({\r\n            guestSearch: guest,\r\n            guestId: guest.id\r\n          });\r\n        }\r\n      });\r\n  }\r\n  \r\n  populateForm(reservation: Reservation): void {\r\n    // Load the full guest details first\r\n    const baseUrl = environment.apiUrl;\r\n    this.http.get<Guest>(`${baseUrl}/guests/${reservation.guestId}`)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error loading guest details', error);\r\n          return of(null);\r\n        })\r\n      )\r\n      .subscribe(guest => {\r\n        if (guest) {\r\n          this.selectedGuest = guest;\r\n          \r\n          // Format dates\r\n          const checkInDate = new Date(reservation.checkInDate);\r\n          const checkOutDate = new Date(reservation.checkOutDate);\r\n          \r\n          this.reservationForm.patchValue({\r\n            guestSearch: guest,\r\n            guestId: reservation.guestId,\r\n            roomId: reservation.roomId,\r\n            checkInDate: checkInDate,\r\n            checkOutDate: checkOutDate,\r\n            status: reservation.status,\r\n            totalAmount: reservation.totalAmount,\r\n            paymentStatus: reservation.paymentStatus,\r\n            notes: reservation.notes\r\n          });\r\n          \r\n          // For edit mode, we also need to load the current room, even if not \"available\"\r\n          if (!this.availableRooms.some(r => r.id === reservation.roomId)) {\r\n            this.http.get<Room>(`${baseUrl}/rooms/${reservation.roomId}`)\r\n              .pipe(\r\n                catchError(error => {\r\n                  console.error('Error loading room details', error);\r\n                  return of(null);\r\n                })\r\n              )\r\n              .subscribe(room => {\r\n                if (room) {\r\n                  this.availableRooms.push(room);\r\n                  this.selectedRoom = room;\r\n                }\r\n              });\r\n          } else {\r\n            this.selectedRoom = this.availableRooms.find(room => room.id === reservation.roomId) || null;\r\n          }\r\n        }\r\n      });\r\n  }\r\n  \r\n  calculateTotalAmount(): void {\r\n    const checkInDate = this.reservationForm.get('checkInDate')?.value;\r\n    const checkOutDate = this.reservationForm.get('checkOutDate')?.value;\r\n    \r\n    if (this.selectedRoom && checkInDate && checkOutDate) {\r\n      const start = new Date(checkInDate);\r\n      const end = new Date(checkOutDate);\r\n      const nights = Math.max(1, Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)));\r\n      \r\n      const totalAmount = this.selectedRoom.price * nights;\r\n      this.reservationForm.patchValue({ totalAmount });\r\n    }\r\n  }\r\n  \r\n  displayGuestFn(guest: Guest): string {\r\n    return guest ? `${guest.firstName} ${guest.lastName}` : '';\r\n  }\r\n  \r\n  onSubmit(): void {\r\n    if (this.reservationForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    this.loading = true;\r\n    const formValue = this.reservationForm.value;\r\n    const baseUrl = environment.apiUrl;\r\n    \r\n    // Format dates for API\r\n    const checkInDate = new Date(formValue.checkInDate);\r\n    const checkOutDate = new Date(formValue.checkOutDate);\r\n    \r\n    const reservation: Reservation = {\r\n      guestId: formValue.guestId,\r\n      roomId: formValue.roomId,\r\n      checkInDate: checkInDate.toISOString().split('T')[0],\r\n      checkOutDate: checkOutDate.toISOString().split('T')[0],\r\n      status: formValue.status,\r\n      totalAmount: formValue.totalAmount,\r\n      paymentStatus: formValue.paymentStatus,\r\n      notes: formValue.notes\r\n    };\r\n    \r\n    if (this.isEditMode) {\r\n      const reservationId = this.route.snapshot.paramMap.get('id');\r\n      this.http.put<Reservation>(`${baseUrl}/reservations/${reservationId}`, reservation)\r\n        .pipe(\r\n          catchError(error => {\r\n            console.error('Error updating reservation', error);\r\n            this.snackBar.open('Failed to update reservation. Please try again later.', 'Close', { duration: 5000 });\r\n            return of(null);\r\n          }),\r\n          finalize(() => this.loading = false)\r\n        )\r\n        .subscribe(response => {\r\n          if (response) {\r\n            this.snackBar.open('Reservation updated successfully', 'Close', { duration: 3000 });\r\n            this.router.navigate(['/reservations', reservationId]);\r\n          }\r\n        });\r\n    } else {\r\n      this.http.post<Reservation>(`${baseUrl}/reservations`, reservation)\r\n        .pipe(\r\n          catchError(error => {\r\n            console.error('Error creating reservation', error);\r\n            this.snackBar.open('Failed to create reservation. Please try again later.', 'Close', { duration: 5000 });\r\n            return of(null);\r\n          }),\r\n          finalize(() => this.loading = false)\r\n        )\r\n        .subscribe(response => {\r\n          if (response) {\r\n            this.snackBar.open('Reservation created successfully', 'Close', { duration: 3000 });\r\n            this.router.navigate(['/reservations']);\r\n          }\r\n        });\r\n    }\r\n  }\r\n  \r\n  goBack(): void {\r\n    this.location.back();\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
