{
  "version": 3,
  "sources": ["src/app/features/auth/login/login.component.ts"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterModule\r\n  ],\r\n  template: `\r\n    <div class=\"login-container\">\r\n      <mat-card class=\"login-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Hotel Management System</mat-card-title>\r\n          <mat-card-subtitle>Sign in to your account</mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Username</mat-label>\r\n              <input matInput formControlName=\"username\" required>\r\n              <mat-error *ngIf=\"loginForm.get('username')?.hasError('required')\">\r\n                Username is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput [type]=\"hidePassword ? 'password' : 'text'\" formControlName=\"password\" required>\r\n              <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\">\r\n                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">\r\n                Password is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <div class=\"form-actions\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loginForm.invalid || isLoading\">\r\n                {{ isLoading ? 'Signing in...' : 'Sign In' }}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n        \r\n        <mat-card-actions>\r\n          <p class=\"register-link\">\r\n            Don't have an account? <a routerLink=\"/register\">Register here</a>\r\n          </p>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .login-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      height: 100vh;\r\n      background-color: #f5f5f5;\r\n    }\r\n    \r\n    .login-card {\r\n      max-width: 400px;\r\n      width: 100%;\r\n      padding: 20px;\r\n    }\r\n    \r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .form-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      margin-top: 24px;\r\n    }\r\n    \r\n    .register-link {\r\n      text-align: center;\r\n      margin-top: 16px;\r\n      font-size: 14px;\r\n    }\r\n    \r\n    mat-card-title {\r\n      font-size: 24px;\r\n      margin-bottom: 8px;\r\n    }\r\n    \r\n    mat-card-subtitle {\r\n      font-size: 16px;\r\n      margin-bottom: 24px;\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent {\r\n  private fb = inject(FormBuilder);\r\n  private authService = inject(AuthService);\r\n  private router = inject(Router);\r\n  private route = inject(ActivatedRoute);\r\n  private snackBar = inject(MatSnackBar);\r\n  \r\n  loginForm: FormGroup;\r\n  hidePassword = true;\r\n  isLoading = false;\r\n  \r\n  constructor() {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n  \r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    this.isLoading = true;\r\n    \r\n    this.authService.login(this.loginForm.value).subscribe({\r\n      next: () => {\r\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\r\n        this.router.navigate([returnUrl]);\r\n      },\r\n      error: (error) => {\r\n        console.error('Login error:', error);\r\n        this.snackBar.open(\r\n          error.error?.message || 'Invalid username or password',\r\n          'Close',\r\n          { duration: 5000 }\r\n        );\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
