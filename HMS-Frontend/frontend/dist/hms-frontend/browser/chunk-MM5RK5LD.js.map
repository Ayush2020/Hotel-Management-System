{
  "version": 3,
  "sources": ["src/app/features/auth/register/register.component.ts"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterModule\r\n  ],\r\n  template: `\r\n    <div class=\"register-container\">\r\n      <mat-card class=\"register-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Hotel Management System</mat-card-title>\r\n          <mat-card-subtitle>Create a new account</mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Username</mat-label>\r\n              <input matInput formControlName=\"username\" required>\r\n              <mat-error *ngIf=\"registerForm.get('username')?.hasError('required')\">\r\n                Username is required\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('username')?.hasError('minlength')\">\r\n                Username must be at least 3 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" required type=\"email\">\r\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">\r\n                Email is required\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">\r\n                Please enter a valid email address\r\n              </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput [type]=\"hidePassword ? 'password' : 'text'\" formControlName=\"password\" required>\r\n              <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\">\r\n                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">\r\n                Password is required\r\n              </mat-error>\r\n              <mat-error *ngIf=\"registerForm.get('password')?.hasError('minlength')\">\r\n                Password must be at least 6 characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n            \r\n            <div class=\"form-actions\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"registerForm.invalid || isLoading\">\r\n                {{ isLoading ? 'Creating account...' : 'Register' }}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card-content>\r\n        \r\n        <mat-card-actions>\r\n          <p class=\"login-link\">\r\n            Already have an account? <a routerLink=\"/login\">Sign in here</a>\r\n          </p>\r\n        </mat-card-actions>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .register-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      height: 100vh;\r\n      background-color: #f5f5f5;\r\n    }\r\n    \r\n    .register-card {\r\n      max-width: 400px;\r\n      width: 100%;\r\n      padding: 20px;\r\n    }\r\n    \r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 16px;\r\n    }\r\n    \r\n    .form-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      margin-top: 24px;\r\n    }\r\n    \r\n    .login-link {\r\n      text-align: center;\r\n      margin-top: 16px;\r\n      font-size: 14px;\r\n    }\r\n    \r\n    mat-card-title {\r\n      font-size: 24px;\r\n      margin-bottom: 8px;\r\n    }\r\n    \r\n    mat-card-subtitle {\r\n      font-size: 16px;\r\n      margin-bottom: 24px;\r\n    }\r\n  `]\r\n})\r\nexport class RegisterComponent {\r\n  private fb = inject(FormBuilder);\r\n  private authService = inject(AuthService);\r\n  private router = inject(Router);\r\n  private snackBar = inject(MatSnackBar);\r\n  \r\n  registerForm: FormGroup;\r\n  hidePassword = true;\r\n  isLoading = false;\r\n  \r\n  constructor() {\r\n    this.registerForm = this.fb.group({\r\n      username: ['', [Validators.required, Validators.minLength(3)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n  \r\n  onSubmit(): void {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    this.isLoading = true;\r\n    \r\n    // Default role is ROLE_RECEPTIONIST\r\n    const registerData = {\r\n      ...this.registerForm.value,\r\n      role: ['receptionist']\r\n    };\r\n    \r\n    this.authService.register(registerData).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Registration successful! Please sign in.', 'Close', {\r\n          duration: 5000\r\n        });\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error: (error) => {\r\n        console.error('Registration error:', error);\r\n        this.snackBar.open(\r\n          error.error?.message || 'Registration failed. Please try again.',\r\n          'Close',\r\n          { duration: 5000 }\r\n        );\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n} "],
  "mappings": "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",
  "names": []
}
